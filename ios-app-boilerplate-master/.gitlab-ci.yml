# Documentation: https://docs.gitlab.com/ce/ci/yaml/README.html
# Based on https://about.gitlab.com/blog/2016/03/10/setting-up-gitlab-ci-for-ios-projects/
# and, https://medium.com/xcblog/xcodebuild-deploy-ios-app-from-command-line-c6defff0d8b8

variables:
  # Run `xcodebuild -showdestinations -workspace App.xcworkspace -scheme App` for available options.
  DEFAULT_SIM_NAME: 'iPhone 8'
  DEFAULT_SIM_OS: '14.4'

stages:
  - Installation
  - Analyze
  - Test
  - Archive

.commons:
  before_script: &commons-before_script
    - bundle install --deployment
    - xcodebuild clean -workspace App.xcworkspace -scheme App
  after_script: &commons-after_script
    - xcodebuild clean -workspace App.xcworkspace -scheme App
  cache: &commons-cache
    key: $CI_COMMIT_REF_SLUG
    paths:
      - vendor/bundle
    policy: pull
  interruptible: true
  tags:
    - ios

Bundles:
  extends: .commons
  stage: Installation
  before_script:
    - bundle install --deployment
  script:
    - ''
  after_script: []
  cache:
    <<: *commons-cache
    policy: push

Analyze:
  extends: .commons
  stage: Analyze
  script:
    - set -o pipefail && xcodebuild analyze -workspace App.xcworkspace -scheme App -destination "platform=iOS Simulator,name=$DEFAULT_SIM_NAME,OS=$DEFAULT_SIM_OS" SWIFT_TREAT_WARNINGS_AS_ERRORS=NO GCC_TREAT_WARNINGS_AS_ERRORS=NO CLANG_ANALYZER_OUTPUT=html CLANG_ANALYZER_OUTPUT_DIR="$(pwd)/analyzer" | tee xcodebuild_analyze.log | bundle exec xcpretty
    - echo 'Open HTML files found below and address the issues to pass this job.'
    - find analyzer -name "*.html"
    - exit `find analyzer -name "*.html" -print -quit | wc -l`
  artifacts:
    when: always
    paths:
      - analyzer/
      - xcodebuild_analyze.log
    expire_in: 1 day

.test:
  extends: .commons
  stage: Test
  script:
    - SIM_NAME="$(echo $CI_JOB_NAME | cut -d ',' -f 1)"
    - SIM_OS="$(echo $CI_JOB_NAME | cut -d ',' -f 2)"
    - set -o pipefail && xcodebuild build-for-testing -workspace App.xcworkspace -scheme App -destination "platform=iOS Simulator,name=$SIM_NAME,OS=$SIM_OS" | tee xcodebuild_build-for-testing.log | bundle exec xcpretty
    - set -o pipefail && xcodebuild test -workspace App.xcworkspace -scheme App -destination "platform=iOS Simulator,name=$SIM_NAME,OS=$SIM_OS" -enableCodeCoverage 'YES' -resultBundlePath ./TestSummaries.xcresult | tee xcodebuild_test.log | bundle exec xcpretty --test || code=$?
    - bundle exec trainer --xcpretty_naming true
    - bundle exec slather coverage --html --output-directory "$(pwd)/coverage" --scheme App --workspace App.xcworkspace App/App.xcodeproj
    - bundle exec slather coverage -s --scheme App --workspace App.xcworkspace App/App.xcodeproj
    - exit `echo $code`
  coverage: '/^Test Coverage: \d+.\d+\%/'
  artifacts:
    when: always
    paths:
      - coverage/
      - xcodebuild_build-for-testing.log
      - xcodebuild_test.log
    reports:
      junit: TestSummaries.xml # https://github.com/xcpretty/xcpretty/issues/344#issuecomment-457486141
    expire_in: 1 day

iPad (8th generation),14.4:
  extends: .test

iPad Air (4th generation),14.4:
  extends: .test

iPad Pro (9.7-inch),14.4:
  extends: .test

iPad Pro (11-inch) (2nd generation),14.4:
  extends: .test

iPad Pro (12.9-inch) (4th generation),14.4:
  extends: .test

iPhone 8,14.4:
  extends: .test

iPhone 8 Plus,14.4:
  extends: .test

iPhone 11,14.4:
  extends: .test

iPhone 11 Pro,14.4:
  extends: .test

iPhone 11 Pro Max,14.4:
  extends: .test

.parse provisioning profile: &parse-provisioning-profile
  - UUID=`grep UUID -A1 -a "Provisioning Profiles/$CI_ENVIRONMENT_NAME.mobileprovision" | grep -io "[-A-F0-9]\{36\}"`
  - DEVELOPMENT_TEAM=`grep com.apple.developer.team-identifier -A1 -a "Provisioning Profiles/$CI_ENVIRONMENT_NAME.mobileprovision" | grep string | awk -F">" '{print $2}' | awk -F"<" '{print $1}'`
  - BUNDLE_ID=`grep application-identifier -A1 -a "Provisioning Profiles/$CI_ENVIRONMENT_NAME.mobileprovision" | grep string | awk -F">" '{print $2}' | awk -F"<" '{print $1}' | sed "s/$DEVELOPMENT_TEAM.//g"`
  - grep ProvisionedDevices -a "Provisioning Profiles/$CI_ENVIRONMENT_NAME.mobileprovision" && EXPORT_METHOD='ad-hoc' || EXPORT_METHOD='app-store'

.archive:
  extends: .commons
  stage: Archive
  before_script:
    - *commons-before_script
    - *parse-provisioning-profile
  script:
    - mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
    - cp -f "Provisioning Profiles/$CI_ENVIRONMENT_NAME.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

    - base64 -d $P12 > Certificates.p12
    - security import Certificates.p12 -P $P12_PASSWORD -A
    - "security set-key-partition-list -S apple-tool:,apple:,codesign: -k $KEYCHAIN_PASSWORD -D $DEVELOPMENT_TEAM -s -t private" # https://stackoverflow.com/a/57912831/968219

    - CONFIGURATION=$(tr '[:lower:]' '[:upper:]' <<< ${CI_COMMIT_BRANCH:0:1})${CI_COMMIT_BRANCH:1} # https://stackoverflow.com/a/12487465/968219
    - set -o pipefail && xcodebuild build -configuration $CONFIGURATION -archivePath 'app.xcarchive' -workspace App.xcworkspace -scheme App -destination 'generic/platform=iOS' PROVISIONING_PROFILE_UUID="$UUID" | tee xcodebuild_build.log | bundle exec xcpretty
    - set -o pipefail && xcodebuild archive -configuration $CONFIGURATION -archivePath 'app.xcarchive' -workspace App.xcworkspace -scheme App -destination 'generic/platform=iOS' PROVISIONING_PROFILE_UUID="$UUID" | tee xcodebuild_archive.log | bundle exec xcpretty

    - echo "<plist><dict><key>method</key><string>$EXPORT_METHOD</string><key>provisioningProfiles</key><dict><key>$BUNDLE_ID</key><string>$UUID</string></dict></dict></plist>" > export-options.plist

    - set -o pipefail && xcodebuild -exportArchive -archivePath 'app.xcarchive' -exportOptionsPlist export-options.plist -exportPath ./ -destination 'generic/platform=iOS' | bundle exec xcpretty
    - ditto -c -k --keepParent -rsrc "app.xcarchive/dSYMs/App.app.dSYM" "App.dSYM.zip"
  after_script:
    - *commons-after_script
    - *parse-provisioning-profile
    - security delete-identity -c $DEVELOPMENT_TEAM
    - rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
  artifacts:
    paths:
      - xcodebuild_build.log
      - xcodebuild_archive.log
      - App.ipa
      - App.dSYM.zip
    expire_in: 1 day
  retry:
    max: 1
    when: script_failure
  only:
    - merge_requests

Arch. Beta:
  extends: .archive
  environment: Beta
  only:
    - beta

Arch. Production:
  extends: .archive
  environment: Production
  only:
    - production
